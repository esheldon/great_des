#!/usr/bin/env python
from __future__ import print_function, division

import os
from pprint import pprint

import numpy
from numpy import array, sqrt
import ngmix
import great_des
#import meds
import fitsio

from argparse import ArgumentParser
parser=ArgumentParser()

parser.add_argument('config_name', help='config name')

parser.add_argument('oldrun', help='run to replace')
parser.add_argument('newrun', help='new run')

parser.add_argument('fnum', type=int, help='file number')
parser.add_argument('gnum', type=int, help='shear number')

parser.add_argument('--noisefree', action='store_true', help='noisefree?')

FPACK_DIMS = [10240,1]

def add_noise(im0, noise):
    """
    get a new image with noise added
    """
    nim = numpy.random.normal(scale=noise,
                              size=im0.shape)
    im = im0 + nim
    return im


class Sim(dict):
    def __init__(self, config_name):
        conf=great_des.files.read_config(name=config_name)
        self.update(conf)
        self.setup_sim()
    
    def get_npsf(self):
        """
        number of psf models
        """
        return self.npsf

    def make_psf_image(self,
                       dims,
                       psf_index=None,
                       noise=None):
        """
        draw from distributions and generate an image

        Add gaussian noise with the specified width
        """
    

        row=(dims[0]-1.)/2.
        col=(dims[1]-1.)/2.

        imdict = self.get_psf_model(psf_index=psf_index)

        gmix=imdict['gmix']
        gmix.set_cen(row, col)

        imdict['im0'] = imdict['gmix'].make_image(dims, nsub=self['nsub'])

        imdict['noise'] = noise

        if noise is not None:
            im = add_noise(imdict['im0'], noise)
        else:
            im = imdict['im0']

        imdict['im'] = im

        return imdict

    def get_psf_model(self, psf_index=None):
        """
        get a psf model, random if psf_index is not sent
        """
        if psf_index is None:
            psf_index = numpy.random.randint(0,self.npsf)
        psf_gmix = self.psf_list[psf_index].copy()

        return {'gmix':psf_gmix, 'psf_index':psf_index}

    def make_gal_image(self, dims, shear, psf_index=None, noise=None):
        """
        draw from distributions and generate an image

        Add gaussian noise with the specified width
        """
    
        row=(dims[0]-1.)/2.
        col=(dims[1]-1.)/2.

        imdict = self.make_gal_model(row, col, shear)

        imdict['im0'] = imdict['gm'].make_image(dims, nsub=self['nsub'])

        imdict['noise'] = noise

        if noise is not None:
            im = add_noise(imdict['im0'], noise)
            s2n = sqrt( (imdict['im0']**2).sum())/noise
        else:
            im = im0
            s2n = -9999.e9

        imdict['im'] = im
        imdict['s2n'] = s2n

        return imdict        

    def make_gal_model(self, row, col, shear, psf_index=None):
        """
        draw from distributions and generate the model
        """

        psf_dict = self.get_psf_model(psf_index=psf_index)

        drow,dcol= self.cen_dist.sample()
        g1a,g2a = self.g_dist.sample2d(1)
        T=self.T_dist.sample()
        counts=self.counts_dist.sample()

        pars_noshear=array([row+drow,
                            col+dcol,
                            g1a[0],
                            g2a[0],
                            T,
                            counts])

        shape=ngmix.Shape(g1a[0], g2a[0])
        shape.shear(shear[0], shear[1])
        pars=pars_noshear.copy()
        pars[2] = shape.g1
        pars[3] = shape.g2

        gm0=ngmix.GMixModel(pars, self['obj_model'])

        gm = gm0.convolve(psf_dict['gmix'])

        return {'gm':gm,
                'gm0':gm0,
                'pars_noshear':pars_noshear,
                'pars':pars,
                'psf_index':psf_dict['psf_index']}

    def setup_sim(self):
        """
        load the distributions
        """
        # object distributions
        self.cen_dist=ngmix.priors.CenPrior(0.0,
                                            0.0,
                                            self['cen_sigma'],
                                            self['cen_sigma'])
        self.g_dist=ngmix.priors.GPriorBA(self['g_sigma'])

        T=self['obj_T_mean']
        Twidth = T*self['obj_T_sigma_frac']
        self.T_dist=ngmix.priors.LogNormal(T, Twidth)

        counts=self['obj_counts_mean']
        countswidth = counts*self['obj_counts_sigma_frac']
        self.counts_dist=ngmix.priors.LogNormal(counts, countswidth)

        self.make_psf_models()

    def make_psf_models(self):
        """
        generate the psf model for convolutions
        """

        psf_data=self['psf_data']
        model = psf_data['model']

        psf_list=[]

        for T in psf_data['Tvals']:
            for e1 in psf_data['e1vals']:
                for e2 in psf_data['e2vals']:
                    psf_pars=[0.0, 0.0, e1, e2, T, 1.0]

                    psf_gmix=ngmix.GMixModel(psf_pars, model)

                    psf_list.append( psf_gmix )

        print("generated",len(psf_list),"psfs")
        self.psf_list = psf_list
        self.npsf=len(psf_list)


    def write_lores_psfs(self, fname, noise=None):
        """
        write psf models sequentially to file
        """

        npsf = self.get_npsf()
        print("writing",npsf,"psfs to file:",fname)

        dims = self['psf_data']['dims']

        with fitsio.FITS(fname,'rw',clobber=True) as fobj:

            for i in xrange(npsf):
                imdict = self.make_psf_image(dims,
                                             psf_index=i,
                                             noise=noise)
                im=imdict['im'].astype('f4')
                fobj.write(im)



    def load_config(self, fname):
        import yaml
        print("loading:",fname)
        with open(fname) as fobj:
            data=yaml.load(fobj)
            self.update(data)

class Replacer(object):
    def __init__(self,
                 input_file,
                 truth_file,
                 output_file,
                 new_truth_file,
                 sim):

        self.truth_file=truth_file
        self.infile=input_file
        self.outfile=output_file
        self.new_truth_file=new_truth_file
        self.sim=sim

        if self.infile==self.outfile:
            raise ValueError("files match:",self.infile,self.outfile)
        if self.truth_file==self.new_truth_file:
            raise ValueError("files match:",
                             self.truth_file,self.new_truth_file)

        self.load_truth_data()

        print("from",self.infile,"to",self.outfile)

    def load_truth_data(self):
        """
        load data from the truth fits file
        """
        import esutil as eu
        print("reading:",self.truth_file)
        tdata=fitsio.read(self.truth_file)

        fields=[('psf_T','f8'),('T','f8')]
        tdata=eu.numpy_util.add_fields(tdata, fields)

        tdata['id_cosmos']=-1
        tdata['fwhm']=-1
        tdata['psf_fwhm']=-1
        tdata['zphot']=-1
        tdata['mean_rgpp_rp'] = -1
        tdata['to_use'] = 1

        self.truth_data=tdata
    
    def go(self):
        """
        run through replacing the images in a new file
        """

        with fitsio.FITS(self.infile) as fin:
            od=fin['object_data'][:]
            ii=fin['image_info'][:]
            meta=fin['metadata'][:]

            # here we assume all same errors
            weights=fin['weight_cutouts'][0:10]
            self.skynoise = 1.0/sqrt(weights[0])

            with fitsio.FITS(self.outfile,'rw',clobber=True) as fout:

                self._make_images(fin, fout)

                # these are copied straight over
                self._fill_ext(fin, fout, 'weight_cutouts')
                self._fill_ext(fin, fout, 'seg_cutouts')

                self._write_galaxies(fout, od)

                print("writing metadata")
                fout.write(od, extname='object_data')
                fout.write(ii, extname='image_info')
                fout.write(meta, extname='metadata')

        self._write_new_truth_file()

    def run_fpack(self):
        """
        fpack.  
        """

        fzname = self.outfile+'.fz'
        if os.path.exists(fzname):
            print("removing:",fzname)
            os.remove(fzname)

        cmd="fpack -t {fpack_dim0},{fpack_dim1} {fname}"
        cmd=cmd.format(fpack_dim0=FPACK_DIMS[0],
                       fpack_dim1=FPACK_DIMS[1],
                       fname=self.outfile)
        print(cmd)
        ret=os.system(cmd)

        if ret != 0:
            print("error fpacking")

    def _write_new_truth_file(self):
        """
        write the new truth data
        """
        print("writing truth data:",self.new_truth_file)
        fitsio.write(self.new_truth_file,
                     self.truth_data,
                     clobber=True)

    def _write_galaxies(self, fout, od):
        """
        write galaxies

        also update the object_data and truth_data
        """

        tdata = self.truth_data

        hdu = fout['image_cutouts']

        print("generating and writing galaxies")

        sim=self.sim

        nobj=od.size
        start=0
        for i in xrange(nobj):

            # arcsec/pixel
            scale = od['dudrow'][i,0]

            box_size=od['box_size'][i]
            dims=[box_size, box_size]

            shear=[tdata['g1_true'][i], tdata['g2_true'][i]]
            #psf_T = 2*(tdata['psf_fwhm']/2.35/scale)**2
            #psfdata={'shape':[tdata['psf_e1'],tdata['psf_e2']],
            #         'T':psf_T}
            imdict = sim.make_gal_image(dims,
                                        shear,
                                        noise=self.skynoise)

            row,col=imdict['gm0'].get_cen()
            od['cutout_row'][i,0] = row
            od['cutout_col'][i,0] = col

            self._fill_truth(i, imdict)

            pars=imdict['pars']

            imravel = imdict['im'].ravel()

            hdu.write(imravel, start=start)

            start += box_size**2

            if (i % 1000) == 0:
                print("    object: %d/%d" % (i+1,nobj))
                ngmix.print_pars(pars)

    def _fill_truth(self, i, imdict):
        tdata=self.truth_data

        pars=imdict['pars_noshear']
        psf_index = imdict['psf_index']

        tdata['id'][i] = i
        tdata['id_psf'][i] = psf_index
        tdata['shape_e1'][i] = pars[2]
        tdata['shape_e2'][i] = pars[3]

        tdata['T'][i] = pars[4]
        tdata['flux'][i] = pars[5]
        tdata['snr'][i] = imdict['s2n']

        pg=self.sim.psf_list[psf_index]
        g1,g2,T= pg.get_g1g2T()

        tdata['psf_e1'][i] = g1
        tdata['psf_e2'][i] = g2
        tdata['psf_T'][i] = T


    def _fill_ext(self, fin, fout, ext):
        """
        just copy the data straight
        """
        print("filling:",ext)

        dims=fin[ext].get_dims()
        npix = dims[0]
        nchunks=1000
        nper = npix/nchunks
        nleft = npix % nchunks

        for i in xrange(nchunks):
            #print("    %d/%d" % (i+1,nchunks))
            start=i*nper
            if i==(nchunks-1):
                stop=start+nper+nleft
            else:
                stop=start+nper

            data = fin[ext][start:stop]

            fout[ext].write(data, start=start)

    def _make_images(self, fin, fout):
        for ext in ['image_cutouts','weight_cutouts','seg_cutouts']:
            print("reserving",ext)
            dims=fin[ext].get_dims()
            tmp=fin[ext][0:10]
            dtype=tmp.dtype

            fout.create_image_hdu(dims=dims,
                                  dtype=dtype,
                                  extname=ext)

def makedirs_fromfile(fname):
    dir=os.path.dirname(fname)
    if not os.path.exists(dir):
        os.makedirs(dir)

def make_alldirs(args):
    makedirs_fromfile(args.output_file)
    makedirs_fromfile(args.new_truth_file)
    makedirs_fromfile(args.psf_file_lores)
    makedirs_fromfile(args.psf_file_hires)

def get_fnames(args):
    keys={'gdrun':args.oldrun,
          'fnum':args.fnum,
          'gnum':args.gnum,
          'noisefree':args.noisefree}
    fnames={}
    fnames['input_file']=great_des.files.get_input_file(ftype='meds',
                                                        **keys)
    fnames['truth_file']=great_des.files.get_input_file(ftype='truth',
                                              **keys)

    keys['gdrun'] = args.newrun
    fnames['output_file']=great_des.files.get_input_file(ftype='meds',
                                                         **keys)
    fnames['new_truth_file']=great_des.files.get_input_file(ftype='truth',
                                                            **keys)
    
    fnames['psf_file_lores']=great_des.files.get_psf_file(ftype='truth',
                                                          res='lores',
                                                          **keys)
    fnames['psf_file_hires']=great_des.files.get_psf_file(ftype='truth',
                                                          res='hires',
                                                          **keys)

    d=os.path.dirname(fnames['output_file'])
    if not os.path.exists(d):
        print("making directory",d)
        os.makedirs(d)

    return fnames

def main():
    args=parser.parse_args()

    fnames=get_fnames(args)
    pprint(fnames)

    sim=Sim(args.config_name)
    sim.write_lores_psfs(fnames['psf_file_lores'])

    replacer=Replacer(fnames['input_file'],
                      fnames['truth_file'],
                      fnames['output_file'],
                      fnames['new_truth_file'],
                      sim)

    replacer.go()
    replacer.run_fpack()

main()
