#!/usr/bin/env python
"""
    %prog [options] run gnum fnum start end

Process the input meds file.
"""
from __future__ import print_function

import os,sys
import shutil
import numpy
import yaml
import fitsio
import meds
import pprint

from great_des import files

from argparse import ArgumentParser
parser = ArgumentParser(__doc__)


parser.add_argument('run',help='run')
parser.add_argument('gnum',type=int,help='shear number')
parser.add_argument('fnum',type=int,help='file number')
parser.add_argument('start',type=int,help='starting object number')
parser.add_argument('end',type=int,help='ending object number')


parser.add_argument("--outfile",default=None,
                    help="use this output file name")

parser.add_argument("--make-plots",action="store_true",
                  help="make some plots")

parser.add_argument("--work-dir",
                  help=("copy files local for processing.  "
                        "Also write to local files and copy out."
                        "The local files are not removed."))

parser.add_argument("--profile", action='store_true',
                  help=("Profile the code using cProfile"))


class TempFile(object):
    def __init__(self, fname):
        self.fname=fname

    def cleanup(self):
        if os.path.exists(self.fname):
            print('removing temp file:',self.fname)
            os.remove(self.fname)

    def __enter__(self):
        return self

    def __exit__(self, exception_type, exception_value, traceback):
        self.cleanup()
    def __del__(self):
        self.cleanup()


class RemoteFile(object):
    def __init__(self, remote_file, local_dir='/tmp'):
        self.local_dir=local_dir
        self.remote_file=remote_file
        self.local_file=self._generate_local_filename()

        if self.local_file==self.remote_file:
            raise ValueError("local file equals remote file: '%s'" % remote_file)

        if not os.path.exists(self.local_dir):
            os.makedirs(self.localdir)

    def _generate_local_filename(self):
        bname=os.path.basename(self.remote_file)
        local_file=os.path.join(self.local_dir, bname)


        return local_file

    def stage(self):
        import shutil

        self.cleanup()
        print('copying to local file:',self.remote_file, self.local_file)
        shutil.copy2(self.remote_file, self.local_file)

    def cleanup(self):
        if os.path.exists(self.local_file):
            print('removing local file:',self.local_file)
            os.remove(self.local_file)

    def __enter__(self):
        self.stage()
        return self

    def __exit__(self, exception_type, exception_value, traceback):
        self.cleanup()
    def __del__(self):
        self.cleanup()


def makedir_fromfile(fname):
    dname=os.path.dirname(fname)
    if not os.path.exists(dname):
        try:
            os.makedirs(dname)
        except:
            # probably a race condition
            pass



def get_g_prior(conf):
    import ngmix
    g_prior_type=conf['g_prior_type']

    if g_prior_type is None:
        return None

    if g_prior_type=='cosmos-sersic':
        g_prior=ngmix.priors.make_gprior_cosmos_sersic(type='erf')

    elif g_prior_type=='great-des':
        g_prior=ngmix.priors.GPriorGreatDES(conf['g_prior_pars'],
                                            gmax=conf['g_prior_max'])

    elif g_prior_type=='zdiskerf':
        g_prior=ngmix.priors.ZDisk2DErf()

    elif g_prior_type=='ba':
        sigma=conf["g_prior_sigma"]
        g_prior=ngmix.priors.GPriorBA(sigma)

    else:
        raise ValueError("implement gprior '%s'" % g_prior_type)

    return g_prior

def get_sub_fname(fname, rng, work_dir):
    rng_string = '%s-%s' % (rng[0], rng[1])

    bname = os.path.basename(fname)

    bname = bname.replace('.fits.fz','').replace('.fits','')
    bname = '%s-%s.fits' % (bname, rng_string)

    newf = os.path.join(work_dir, bname)

    return newf

def get_sub(meds_file, rng, work_dir):
    """
    Local files will get cleaned up
    """

    print(meds_file)
    newf = get_sub_fname(meds_file, rng, work_dir)
    extracted=meds.MEDSExtractor(meds_file, rng[0], rng[1], newf,
                                 cleanup=True)

    return extracted

def get_truth_sub_fname(fname, rng, work_dir):
    """
    local file holding subset
    """
    rng_string = '%s-%s' % (rng[0], rng[1])

    bname = os.path.basename(fname)
    bname = bname.replace('.fits','')

    bname = '%s-%s.fits' % (bname, rng_string)

    newf = os.path.join(work_dir, bname)

    return newf

def get_truth_sub(truth_file, rng, work_dir):
    """
    Local files will get cleaned up
    """

    print(truth_file)
    newf = get_truth_sub_fname(truth_file, rng, work_dir)
    with fitsio.FITS(truth_file) as fits:
        data=fits[1][rng[0]:rng[1]+1]

    print("writing truth sub:",newf)
    fitsio.write(newf, data, clobber=True)

    return TempFile(newf)


def get_range(rng_string):
    if rng_string is not None:
        rng = rng_string.split(',')
        rng = [int(i) for i in rng]
    else:
        rng=None

    return rng


def cleanup_checkpoint(checkpoint_file):
    """
    if we get this far, we have succeeded in writing the data. We can remove
    the checkpoint file
    """
    if os.path.exists(checkpoint_file):
        print('removing checkpoint file',checkpoint_file)
        os.remove(checkpoint_file)


def get_checkpoint_data(out_file):
    """
    See if the code was checkpointed in a previous run
    """
    checkpoint_file=out_file.replace('.fits','-checkpoint.fits')
    data=None

    if os.path.exists(checkpoint_file):
        data={}
        print('reading checkpoint data:',checkpoint_file)
        with fitsio.FITS(checkpoint_file) as fobj:
            data['data']=fobj['model_fits'][:]

    return checkpoint_file, data

def run_sfitter(conf, checkpoint_data=None):
    """
    Do the fit
    """
    import great_des
    import great3
    import ngmix
    from ngmix.joint_prior import PriorSimpleSep, JointPriorSimpleHybrid
    from ngmix.priors import ZDisk2D, CenPrior

    mpars=conf['model_pars']
    if 'joint_prior' in mpars:
        jp=mpars['joint_prior']
        cen_width=jp['cen_width']

        cen_prior = CenPrior(0.0, 0.0, cen_width, cen_width)

        g_prior_pars=jp['g_prior_pars']
        g_prior = ngmix.priors.GPriorGreatDES(pars=jp['g_prior_pars'],
                                              gmax=1.0)
        g_prior_flat=ngmix.priors.ZDisk2D(1.0)

        TF_prior=great_des.files.read_prior(run=jp['TF_prior_run'],
                                            partype=jp['TF_partype'])

        conf['prior']=JointPriorSimpleHybrid(cen_prior, g_prior, TF_prior)
        conf['prior_gflat']=JointPriorSimpleHybrid(cen_prior, g_prior_flat, TF_prior)

        if 'fracdev_prior_run' in jp:
            conf['fracdev_prior']=great_des.files.read_prior(run=jp['fracdev_prior_run'],
                                                             partype=jp['fracdev_partype'])
    else:
        cen_prior=great3.nfit.get_cen_prior(mpars['cen_prior_type'],
                                            pars=mpars['cen_prior_pars'])

        g_prior=great3.nfit.get_g_prior(mpars['g_prior_type'],
                                        pars=mpars['g_prior_pars'])
        T_prior=great3.nfit.get_T_prior(mpars['T_prior_type'],
                                        pars=mpars['T_prior_pars'])
        counts_prior=great3.nfit.get_counts_prior(mpars['counts_prior_type'],
                                                  pars=mpars['counts_prior_pars'])

        print("g_prior:",g_prior)
        print("T_prior:",T_prior)
        print("counts_prior:",counts_prior)
        conf['prior']=PriorSimpleSep(cen_prior,
                                     g_prior,
                                     T_prior,
                                     counts_prior)


    
    mpars=conf['model_pars']
    if conf['fitter']=='max':
        if mpars['model']=='cm':
            fitclass=great_des.sfit.CompositeMedsFitMax
        else:
            fitclass=great_des.sfit.MedsFitMax
    elif conf['fitter']=='isample':
        if mpars['model']=='cm':
            fitclass=great_des.sfit.CompositeMedsFitISample
        else:
            fitclass=great_des.sfit.MedsFitISample
    else:
        raise ValueError("bad fitter: '%s'" % conf['fitter'])

    # for fitter=='max' only the flat prior is used
    sconf={}
    sconf.update(conf)
    del sconf['meds_file']
    del sconf['truth_file']
    del sconf['psf_file']
    gm=fitclass(conf['meds_file'],
                conf['truth_file'],
                conf['psf_file'],
                checkpoint_data=checkpoint_data,
                **sconf)

    gm.do_fits()
    data=gm.get_data()

    return data


def setup_work_files(conf):
    """
    Set up local, possibly sub-range meds files
    """

    meds_file=conf['meds_file']
    meds_file_full=conf['meds_file']
    truth_file=conf['truth_file']
    truth_file_full=conf['truth_file']

    extracted=None
    truth_extracted=None

    if conf['work_dir'] is not None:
        # note variable extracted is cleaned up when MedsExtractors get
        # garbage collected
        rng=conf['obj_range']
        extracted=get_sub(meds_file_full, rng, conf['work_dir'])
        meds_file= extracted.sub_file

        truth_extracted=get_truth_sub(truth_file_full, rng, conf['work_dir'])
        truth_file=truth_extracted.fname


    return meds_file, meds_file_full, extracted, truth_file, truth_file_full, truth_extracted

def write_data(data, out_file):
    """
    write the actual data.  clobber existing
    """
    makedir_fromfile(out_file)
    print('writing:',out_file)
    with fitsio.FITS(out_file,'rw',clobber=True) as fobj:
        fobj.write(data,extname="model_fits")

def go_profile(conf):
    # don't want to see the JIT
    import cProfile
    import pstats
    import ngmix

    go(conf)

    # run twice to avoid jit stuff
    print("--- profiling ---")
    cProfile.runctx('go(conf)',
                    globals(),locals(),
                    'profile_stats')
    
    p = pstats.Stats('profile_stats')
    p.sort_stats('time').print_stats()


def go(conf):

    checkpoint_file, checkpoint_data=get_checkpoint_data(conf['output_file'])

    pprint.pprint(conf)

    meds_file,meds_file_full,extracted,truth_file,truth_file_full,truth_extracted=\
                        setup_work_files(conf)

    conf['meds_file'] = meds_file
    conf['meds_file_full'] = meds_file_full
    conf['truth_file'] = truth_file
    conf['truth_file_full'] = truth_file_full

    # if work_dir is sent, we do range by extracting it, see above, so

    conf['checkpoint_file']=checkpoint_file

    data=run_sfitter(conf, checkpoint_data=checkpoint_data)

    write_data(data, conf['output_file'])

    cleanup_checkpoint(checkpoint_file)
  
    
def main():
    args=parser.parse_args()

    run=args.run
    gnum=args.gnum
    fnum=args.fnum
    start=args.start
    end=args.end
    
    conf=files.read_config(run=run)

    conf['gnum']=gnum
    conf['fnum']=fnum
    conf['obj_range'] = [start,end]
    conf['make_plots'] = args.make_plots
    conf['work_dir'] = args.work_dir

    gdrun=conf['gdrun']

    conf['meds_file']=files.get_input_file(gdrun=gdrun,
                                           ftype='meds',
                                           gnum=gnum,
                                           fnum=fnum,
                                           noisefree=conf['noisefree'])
    conf['truth_file']=files.get_input_file(gdrun=gdrun,
                                            ftype='truth',
                                            gnum=gnum,
                                            fnum=fnum,
                                            noisefree=conf['noisefree'])

    conf['psf_file']=files.get_psf_file(gdrun=gdrun)

    if args.outfile is not None:
        conf['output_file']=args.outfile
    else:
        conf['output_file'] = files.get_output_file(run=run,
                                            gnum=gnum,
                                            fnum=fnum,
                                            start=start,
                                            end=end)


    if args.profile:
        go_profile(conf)
    else:
        go(conf)

if __name__=="__main__":
    main()
